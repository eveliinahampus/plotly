---
title: "#FigureFriday  Week 30"
description: "Week 30"
format: 
  html:
    code-fold: true
execute:
  echo: false
code:
  collapsed: true

---

# the Rural agency Investments

The Rural Development Agency is part of the Department of Agriculture and it provides loans, grants, and loan guarantees to bring prosperity and opportunity to rural areas. The data set was pulled for 2024. 


```{python collapsed}
#| echo: false
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.io as pio
pd.options.mode.chained_assignment = None  # default='warn'
pio.renderers.default = "notebook"

# Load the CSV file:
file_path = 'https://raw.githubusercontent.com/plotly/Figure-Friday/main/2024/week-30/rural-investments.csv'
data = pd.read_csv(file_path)
data["Program Area"] = data["Program Area"].astype("category")


# Select only the relevant columns for the plot
invdata = data[['County FIPS', 'Investment Dollars']]

# Convert County FIPS to string, remove leading apostrophes, and add zero when needed
invdata['County FIPS'] = (
    invdata.loc[:,'County FIPS'].astype(str)
    .str.replace("'", "")
    .str.zfill(5)
    )

# Convert Investment Dollars to float
invdata['Investment Dollars'] = invdata['Investment Dollars'].str.replace(',', '').astype(float)

# Group by County FIPS and sum the investment dollars
invdata_grouped = invdata.groupby('County FIPS').sum().reset_index()
invdata_grouped.loc[:,'log10_inv_USD'] = np.log10(invdata_grouped.loc[:,'Investment Dollars'])
invdata_grouped = invdata_grouped.rename(columns={'Investment Dollars':'inv_USD'})

```


```{python} 
# Create the map
fig = px.choropleth(
    invdata_grouped,
    geojson="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json",
    locations='County FIPS',
    color='inv_USD',
    color_continuous_scale="Viridis",
    scope="usa",
    labels={'inv_USD': 'Investment ($)'},
    title='Investment Dollars per County'
    )

fig.update_layout(margin={"r":0, "t":0, "l":0, "b":0})
fig.update_traces(marker_line_width=0)
fig.show()

```

The distribution of investments is not normal. Therefore the visualisation may not show much difference in regions. Performing a log transofrmation on the data will resolve the issue.

```{python} 
from plotly.subplots import make_subplots
import plotly.graph_objects as go

lnx = list(range(1,9,1))

fig = make_subplots(rows=1, cols=2)
fig.add_trace(
    go.Histogram(
        x=invdata_grouped["log10_inv_USD"], 
        name= "Log<sub>10</sub> Investment Dollars",
        xbins=dict( # bins used for histogram
            start=2,
            end=9,
            size=0.2
            )
        ), 
    row=1, col=1
    )


fig.update_layout(
    xaxis=dict(
        tickvals=lnx,  # Set the tick values to the X values
        ticktext=[f'10<sup>{val}</sup>' for val in lnx]  # Format as 10^n
    ),
    xaxis_title='Log<sub>10</sub> (Investment USD)'
)

fig.add_trace(
    go.Histogram(x=invdata_grouped["inv_USD"], name= "Investment Dollars"), 
    row=1, col=2,

    )

fig.update_layout(
    legend=dict(
        orientation="h",
        yanchor="top",
        y=-0.2,  # Adjust this value to move the legend further down
        xanchor="center",
        x=0.5
    )
)

fig.update_xaxes(    
    title_text='Investment USD',
    col=2,
    row=1
    )

fig.show()

```

Now that $\log(\text{Investment USD})$ has normal distribution, we can set the color based on it, and add the real numbers to the hover.

```{python} 
# Create the map
fig = px.choropleth(
    invdata_grouped,
    geojson="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json",
    locations='County FIPS',
    color='log10_inv_USD',
    color_continuous_scale="Viridis",
    hover_data=['inv_USD', 'County FIPS'],
    scope="usa",
    labels={
        'log10_inv_USD': 'Log(Investment Dollars)', 
        'inv_USD': 'Investment Dollars',
        'County FIPS': 'County'
        },
    title='Logarithm of Investment Dollars per County'
    )

fig.update_layout(margin={"r":0, "t":0, "l":0, "b":0})
fig.update_traces(marker_line_width=0)
fig.show()

```
